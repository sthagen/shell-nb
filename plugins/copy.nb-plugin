#!/usr/bin/env bash
###############################################################################
# copy / duplicate
#
# A plugin for `nb` providing copy / duplicate functionality.
#
# Install with:
#   nb plugin install https://github.com/xwmx/nb/blob/master/plugins/copy.nb-plugin
#
# https://github.com/xwmx/nb
###############################################################################

# Add the new subcommand names with `_subcommands add <name>`.
_subcommands add "copy"
_subcommands add "duplicate"

# Define help and usage text with `_subcommands describe <subcommand> <usage>`.
_subcommands describe "copy" <<HEREDOC
Usage:
  nb copy ([<notebook>:][<folder-path>/][<id> | <filename> | <title>])

Description:
  Create a copy of the specified item in the current notebook.

Alias: \`duplicate\`
HEREDOC

# Define the subcommand as a function, named with a leading underscore.
_copy() {
  # The selector argument can be an <id>, <filename>, <path>, or <title>, with
  # or without a preceeding notebook name. Examples:
  #   1
  #   example.md
  #   title
  #   /path/to/example.md
  #   notebook:1
  #   notebook:example.md
  #   notebook:title
  #   notebook:/path/to/example.md
  local _selector="${1:-}"

  # Check for the presence of a selector, exiting and printing help if not
  # found:
  if [[ -z "${_selector:-}" ]]
  then
    _help "copy"
    exit 1
  fi

  # Get the relative path using the selector:
  local _source_relative_path=
  _source_relative_path="$(_show "${_selector}" --relative-path)"

  # Get the current notebook path:
  local _notebook_path=
  _notebook_path="$(_notebooks current --path)"

  # Validate that the selector represents a valid file:
  if [[   -z "${_source_relative_path:-}"                 ]] ||
     [[ ! -e "${_notebook_path}/${_source_relative_path}" ]]
  then
    printf "Not found: %s\\n" "${_selector}"
    exit 1
  fi

  # Get a unique filename based on the source filename:
  local _target_relative_path=
  _target_relative_path="$(
    _notebooks current --filename "${_source_relative_path}"
  )"

  if [[ "${_target_relative_path:-}" =~ / ]]
  then
    local _target_folder_path="${_notebook_path}/${_target_relative_path%/*}"
  else
    local _target_folder_path="${_notebook_path}"
  fi

  # Check if the file is a text file:
  if _show "${_source_relative_path}" --type text
  then # Text can use `_add`.
    # Print the source contents and pipe to `_add`:
    _show "${_source_relative_path}" --no-color --print   \
      | _add "${_target_relative_path}"
  else
    local _copy_arguments=(
      "${_notebook_path}/${_source_relative_path}"
      "${_notebook_path}/${_target_relative_path}"
    )

    if [[ -d "${_notebook_path}/${_source_relative_path}" ]]
    then
      _copy_arguments=("-R" "${_copy_arguments[@]:-}")
    fi

    cp "${_copy_arguments[@]:-}"

    # Add the new filename to the index:
    _index add "${_target_relative_path##*/}" "${_target_folder_path}"

    # Record the change in git:
    _git checkpoint "[nb] Add: ${_target_relative_path}"

    # Print feedback:
    local _info=
    _info="$(_show "${_target_relative_path}" --info-line)"

    printf "Added: %s\\n" "${_info}"
  fi
}

# Use `_subcommands alias` to define a full alias with linked help / usage.
# Aliases also have to be added with `_subcommands add <name>`.
_subcommands alias "copy" "duplicate"
